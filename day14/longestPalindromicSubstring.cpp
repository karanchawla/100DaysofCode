// Find the longest palindromic substring given a string

#include <string>
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

string findPalindrome(string s, int left, int right)
{
	int n = s.size();

	while(left  >= 0 && right <= n-1 && s[left]==s[right])
	{
		left--;
		right++;
	}

	// cout << s.substr(left+1, right-left-1) << endl;

	return s.substr(left+1, right-left-1);
}

string longestPalindromeRecursive(string s)
{
	int  n = s.size();
	if(n<=1) return s;

	string longest;

	for(int i = 0; i < n-1; i++)
	{
		string str = findPalindrome(s,i,i);
		if(str.size() > longest.size())
		{
			longest = str;
		}
		// str = findPalindrome(s,i,i+1);
		// if(str.size() > longest.size())
		// {
		// 	longest = str;
		// }
	}

	return longest;
}

int main(int argc, char**argv)
{
    string s = "abacdfgdaabaa";
    if (argc > 1){
        s = argv[1];
    }
    cout <<  s << " : " << longestPalindromeRecursive(s) << endl;

    // s
    // cout <<  s << " : " << longestPalindromeRecursive(s) << endl;

    return 0;
}